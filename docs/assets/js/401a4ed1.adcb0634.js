"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[234],{6286:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return p}});var a=n(8427),r=n(4397),o=(n(2784),n(876)),s=["components"],i={sidebar_position:-2,sidebar_label:"Use cases"},l="React async states use cases",c={unversionedId:"use-cases",id:"use-cases",title:"React async states use cases",description:"The library can be used for the following use cases/paradigms:",source:"@site/docs/use-cases.md",sourceDirName:".",slug:"/use-cases",permalink:"/react-async-states/docs/use-cases",draft:!1,editUrl:"https://github.com/incepter/react-async-states/edit/main/packages/docs/docs/use-cases.md",tags:[],version:"current",sidebarPosition:-2,frontMatter:{sidebar_position:-2,sidebar_label:"Use cases"},sidebar:"tutorialSidebar",previous:{title:"Intro",permalink:"/react-async-states/docs/intro"},next:{title:"First steps",permalink:"/react-async-states/docs/tutorial/first-steps"}},u={},p=[{value:"<strong>Manage data fetching</strong>",id:"manage-data-fetching",level:2},{value:"<strong>Register abort callbacks</strong>",id:"register-abort-callbacks",level:2},{value:"<strong>Automatic abort</strong>",id:"automatic-abort",level:2},{value:"<strong>Mix synchronous and asynchronous behavior</strong>",id:"mix-synchronous-and-asynchronous-behavior",level:2},{value:"<strong>Derive states and control when to re-render</strong>",id:"derive-states-and-control-when-to-re-render",level:2},{value:"<strong>Select from multiple states</strong>",id:"select-from-multiple-states",level:2},{value:"<strong>Work with or without AsyncStateProvider</strong>",id:"work-with-or-without-asyncstateprovider",level:2},{value:"<strong>Dynamic creation and sharing of states</strong>",id:"dynamic-creation-and-sharing-of-states",level:2},{value:"<strong>Fork and replicate behavior</strong>",id:"fork-and-replicate-behavior",level:2},{value:"<strong>Debounce and throttle</strong>",id:"debounce-and-throttle",level:2},{value:"<strong>React 18+ friendly</strong>",id:"react-18-friendly",level:2},{value:"<strong>Powerful producers</strong>",id:"powerful-producers",level:2},{value:"<strong>Cache support</strong>",id:"cache-support",level:2},{value:"<strong>Events for side effects support</strong>",id:"events-for-side-effects-support",level:2}],d={toc:p};function h(e){var t=e.components,n=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"react-async-states-use-cases"},"React async states use cases"),(0,o.kt)("p",null,"The library can be used for the following use cases/paradigms:"),(0,o.kt)("h2",{id:"manage-data-fetching"},(0,o.kt)("strong",{parentName:"h2"},"Manage data fetching")),(0,o.kt)("p",null,"The primary usage of asynchronous programing is to fetch data.\nData fetching can be as easy as writing the request function, the library then\nadds the ",(0,o.kt)("inlineCode",{parentName:"p"},"status")," as part of the state along with resulting ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," and the\nparameter that the function was ran with (",(0,o.kt)("inlineCode",{parentName:"p"},"props"),") and the ",(0,o.kt)("inlineCode",{parentName:"p"},"timestamp")," at which\nthe state was constructed."),(0,o.kt)("p",null,"Click on ",(0,o.kt)("a",{parentName:"p",href:"/docs/faq/how-the-library-works"},"this link")," for more on data fetching."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// very basic usage can be like this:\nconst {state: {status, data, props}} = useAsyncState(() => fetch().then());\nconst {state: {status, data, props}} = useAsyncState(async () => await fetch().then());\nconst {state: {status, data, props}} = useAsyncState(function* () {return yield fetch().then()});\nconst {state: {status, data, props}} = useAsyncState(myProducer);\n")),(0,o.kt)("h2",{id:"register-abort-callbacks"},(0,o.kt)("strong",{parentName:"h2"},"Register abort callbacks")),(0,o.kt)("p",null,"The library allows to easily register abort callbacks from the ",(0,o.kt)("inlineCode",{parentName:"p"},"PRODUCER")," function.\nThis is used to abort fetch operations and perform cleanups.\nExample:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const {state: {status, data}} = useAsyncState(function getUserPosts(props) {\n  const controller = new AbortController();\n  // NOTE: many abort callbacks can be registered, even conditionally\n  // props.onAbort(() => clearTimeout(timeoutId));\n  props.onAbort(() => controller.abort());\n  const {signal} = controller;\n  return fetch(someUrl, {signal}).then(readFetchResponse);\n});\n")),(0,o.kt)("p",null,"Click on ",(0,o.kt)("a",{parentName:"p",href:"/docs/faq/cancellations"},"this link")," for more on data fetching."),(0,o.kt)("h2",{id:"automatic-abort"},(0,o.kt)("strong",{parentName:"h2"},"Automatic abort")),(0,o.kt)("p",null,"Aborting a function call can be either automatic or imperative by user action\n(via the ",(0,o.kt)("inlineCode",{parentName:"p"},"abort")," API). The call will be automatically aborted if the\ndependencies change or the component unmounts. If the function is a generator,\nit will immediately stop invocation on the next yield."),(0,o.kt)("p",null,"The abort callback is retrieved from ",(0,o.kt)("inlineCode",{parentName:"p"},"useAsyncState")," like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const {abort} = useAsyncState(asyncFunction);\n")),(0,o.kt)("h2",{id:"mix-synchronous-and-asynchronous-behavior"},(0,o.kt)("strong",{parentName:"h2"},"Mix synchronous and asynchronous behavior")),(0,o.kt)("p",null,"The library transition to ",(0,o.kt)("inlineCode",{parentName:"p"},"pending")," state only if it encounters\na ",(0,o.kt)("inlineCode",{parentName:"p"},"Promise")," object. This means that synchronous states will pass directly\nto ",(0,o.kt)("inlineCode",{parentName:"p"},"success")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"error")," states without a ",(0,o.kt)("inlineCode",{parentName:"p"},"pending")," transition."),(0,o.kt)("p",null,"So all depends on the return value of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Producer"),", if it returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"Promise"),"\nor  a ",(0,o.kt)("inlineCode",{parentName:"p"},"thenable")," it passes to ",(0,o.kt)("inlineCode",{parentName:"p"},"pending"),". "),(0,o.kt)("h2",{id:"derive-states-and-control-when-to-re-render"},(0,o.kt)("strong",{parentName:"h2"},"Derive states and control when to re-render")),(0,o.kt)("p",null,"You can select only portions of a state (or multiple states) and\ndecide whether they are the same or not (to trigger a re-render).\nExample:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// state here is no longer the default, but what `selector` returns\nconst {state: username} = useAsyncState({\n  // ...\n  selector: current => current.status === "success" && current.data.name,\n  areEqual: (prev, next) => prev === next, // the default equality check is by Object.is\n})\n// or can be used like this:\nconst currentUserPosts = useSelector(\n  ["current-user", "posts"],\n  (user, posts) => posts.data.filter(t => t.data.userId === user.id),\n  areEqual\n);\n')),(0,o.kt)("h2",{id:"select-from-multiple-states"},(0,o.kt)("strong",{parentName:"h2"},"Select from multiple states")),(0,o.kt)("p",null,"This is possible via ",(0,o.kt)("inlineCode",{parentName:"p"},"useSelector")," that allows to subscribe to multiple\nstates and select the needed information. It also allows you to write a function\nreceiving all registered states in the provider and subscribe to only relevant\nones based on your needs (maybe targeting via regex?)."),(0,o.kt)("h2",{id:"work-with-or-without-asyncstateprovider"},(0,o.kt)("strong",{parentName:"h2"},"Work with or without AsyncStateProvider")),(0,o.kt)("p",null,"Sharing state can be done via provider, and then you only need the ",(0,o.kt)("inlineCode",{parentName:"p"},"string")," key\nto subscribe to it, and you can even wait for it to be available.\nThis isn't the only way to subscribe to a state, it can be done via other\ntechniques that we will see later."),(0,o.kt)("h2",{id:"dynamic-creation-and-sharing-of-states"},(0,o.kt)("strong",{parentName:"h2"},"Dynamic creation and sharing of states")),(0,o.kt)("p",null,"States can be dynamically created and shared at runtime with different ways:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"You can change the initial registered states at the provider, anytime."),(0,o.kt)("li",{parentName:"ol"},"You can '",(0,o.kt)("inlineCode",{parentName:"li"},"hoist"),"' on demand created state to the provider."),(0,o.kt)("li",{parentName:"ol"},"You can declare them at component or module level and wire them."),(0,o.kt)("li",{parentName:"ol"},"you can create them anytime via ",(0,o.kt)("inlineCode",{parentName:"li"},"createSource"))),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// inside a component:\nconst {source} = useAsyncState();\n// later, in another component:\nconst {state, run} = useAsyncState(source);\n\n// or at module level\nimport {createSource} from "react-async-states";\n\nconst source = createSource(key, producer, config);\n// then, in any part of the app, subscribe and have full control over it\nconst {state, run} = useAsyncState(source);\n')),(0,o.kt)("h2",{id:"fork-and-replicate-behavior"},(0,o.kt)("strong",{parentName:"h2"},"Fork and replicate behavior")),(0,o.kt)("p",null,"This allows to re-use your function in a completely new state (with all features)\nwithout impacting the original state.\nThis process is called ",(0,o.kt)("inlineCode",{parentName:"p"},"forking")," and technically re-uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"config")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"producer")," you used."),(0,o.kt)("h2",{id:"debounce-and-throttle"},(0,o.kt)("strong",{parentName:"h2"},"Debounce and throttle")),(0,o.kt)("p",null,"You can debounce and throttle function calls. Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// at module level\nconst source = createSource(key, producer, {runEffect: "debounce", runEffectDurationMs: 500});\n// or\nconst {state} = useAsyncState({runEffect: "debounce", runEffectDurationMs: 500});\n')),(0,o.kt)("h2",{id:"react-18-friendly"},(0,o.kt)("strong",{parentName:"h2"},"React 18+ friendly")),(0,o.kt)("p",null,"The library already supports React 18 paradigms, and allows to suspend a component when\nthe state status is ",(0,o.kt)("inlineCode",{parentName:"p"},"pending")," via the ",(0,o.kt)("inlineCode",{parentName:"p"},"read()")," function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const {read} = useAsyncState(asyncFunction);\n\n// this either suspends on react 18+ or give you the selected state after warning you\nconst selectedState = read();\n")),(0,o.kt)("h2",{id:"powerful-producers"},(0,o.kt)("strong",{parentName:"h2"},"Powerful producers")),(0,o.kt)("p",null,"The producer concept is  a more generic way to grab\nstate from a function, the library tries to give the producers more power to have\nmore control in your app. Like"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Running a producer from a producer"),(0,o.kt)("li",{parentName:"ul"},"Cascade cancellation"),(0,o.kt)("li",{parentName:"ul"},"Create a producer inside a producer (close over params)"),(0,o.kt)("li",{parentName:"ul"},"Select from other async states"),(0,o.kt)("li",{parentName:"ul"},"Run and wait"),(0,o.kt)("li",{parentName:"ul"},"Run while forking..."),(0,o.kt)("li",{parentName:"ul"},"Update state after resolve (optimization for SSE and websockets and intervals and workers)")),(0,o.kt)("h2",{id:"cache-support"},(0,o.kt)("strong",{parentName:"h2"},"Cache support")),(0,o.kt)("p",null,"The library supports caching the producer's result from the ",(0,o.kt)("inlineCode",{parentName:"p"},"args")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"payload")," that was ran with.\nThe cache may be invalidated via ",(0,o.kt)("inlineCode",{parentName:"p"},"invalidateCache"),", persisted via ",(0,o.kt)("inlineCode",{parentName:"p"},"persist")," and\nloaded via ",(0,o.kt)("inlineCode",{parentName:"p"},"load"),"."),(0,o.kt)("h2",{id:"events-for-side-effects-support"},(0,o.kt)("strong",{parentName:"h2"},"Events for side effects support")),(0,o.kt)("p",null,"When a subscription occurs to an async state, a ",(0,o.kt)("inlineCode",{parentName:"p"},"events.subscribe")," may be useful\nto attach some platform specific event handlers like focus, resize... etc"),(0,o.kt)("p",null,"And ",(0,o.kt)("inlineCode",{parentName:"p"},"events.change")," let you define side effects that should be executed when a\nstate change occurs."))}h.isMDXComponent=!0},876:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),h=r,m=d["".concat(l,".").concat(h)]||d[h]||p[h]||o;return n?a.createElement(m,s(s({ref:t},u),{},{components:n})):a.createElement(m,s({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);